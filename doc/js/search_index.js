var search_data = {"index":{"searchIndex":["simpleoauth","client","token","authorize()","delete()","expired?()","get()","load_token()","new()","new()","post()","put()","refresh!()","save_token()","to_json()","simpleoauth.gemspec"],"longSearchIndex":["simpleoauth","simpleoauth::client","simpleoauth::token","simpleoauth::client#authorize()","simpleoauth::client#delete()","simpleoauth::token#expired?()","simpleoauth::client#get()","simpleoauth::client#load_token()","simpleoauth::client::new()","simpleoauth::token::new()","simpleoauth::client#post()","simpleoauth::client#put()","simpleoauth::token#refresh!()","simpleoauth::client#save_token()","simpleoauth::token#to_json()",""],"info":[["SimpleOAuth","","SimpleOAuth.html","","<p>SimpleOAuth is a gem that handles OAuth2 authentication that is used by\nmany web APIs to provide access …\n"],["SimpleOAuth::Client","","SimpleOAuth/Client.html","","<p>A class for handling the OAuth protocol\n"],["SimpleOAuth::Token","","SimpleOAuth/Token.html","","<p>A class for storing and accessing instances of OAuth tokens\n"],["authorize","SimpleOAuth::Client","SimpleOAuth/Client.html#method-i-authorize","(authorization_code, callback_url, scope)","<p>Send authorization code to get a token for the first time\n<p>NOTE: This gem cannot retrieve an authorization …\n"],["delete","SimpleOAuth::Client","SimpleOAuth/Client.html#method-i-delete","(path, headers = {})","<p>Send a Http DELETE request to path, using token as authorization\n"],["expired?","SimpleOAuth::Token","SimpleOAuth/Token.html#method-i-expired-3F","()","<p>Check if the token has expired\n"],["get","SimpleOAuth::Client","SimpleOAuth/Client.html#method-i-get","(path, query = nil, headers = {})","<p>Sent a Http GET request to path, using token as authorization\n"],["load_token","SimpleOAuth::Client","SimpleOAuth/Client.html#method-i-load_token","(dir = nil)","<p>Load token from file. Also sets <code>token_dir</code> to the provided\nargument.\n"],["new","SimpleOAuth::Client","SimpleOAuth/Client.html#method-c-new","(host, token_endpoint, client_id, client_secret, token_endpoint_auth = nil)","<p>Create a new OAuth client\n<p>host &mdash; the host name of the resource provider, e.g. <code>api.example.com</code>\n<p>token_endpoint … &mdash; "],["new","SimpleOAuth::Token","SimpleOAuth/Token.html#method-c-new","(access_token, expires_in, refresh_token, timestamp = Time.now, token_type = 'bearer')","<p>Create a new token object\n"],["post","SimpleOAuth::Client","SimpleOAuth/Client.html#method-i-post","(path, body, headers = {})","<p>Send a Http POST request to path, using token as authorization\n"],["put","SimpleOAuth::Client","SimpleOAuth/Client.html#method-i-put","(path, body, headers = {})","<p>Send a Http PUT request to path, using token as authorization\n"],["refresh!","SimpleOAuth::Token","SimpleOAuth/Token.html#method-i-refresh-21","(access_token, expires_in, refresh_token, timestamp = Time.now)","<p>Update token with new values\n"],["save_token","SimpleOAuth::Client","SimpleOAuth/Client.html#method-i-save_token","(dir = nil)","<p>Save Token to file. Also sets <code>token_dir</code> to the provided\nargument.\n"],["to_json","SimpleOAuth::Token","SimpleOAuth/Token.html#method-i-to_json","()","<p>Return a json representation of the token\n"],["simpleoauth.gemspec","","simpleoauth_gemspec.html","","<p># simpleoauth.gemspec # frozen_string_literal: true\n<p>Gem::Specification.new do |s|\n\n<pre>s.name      = &#39;simpleoauth&#39; ...</pre>\n"]]}}